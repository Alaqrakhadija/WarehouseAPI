// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Infrastructure.DbContexts;

#nullable disable

namespace Warehouse.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20230828121232_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Warehouse.Domain.Entities.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Containers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "40 ft HC"
                        },
                        new
                        {
                            Id = 2,
                            Type = "20 ft FR"
                        },
                        new
                        {
                            Id = 3,
                            Type = "40 ft HC"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dimensions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dimensions = 1
                        },
                        new
                        {
                            Id = 2,
                            Dimensions = 2
                        },
                        new
                        {
                            Id = 3,
                            Dimensions = 3
                        },
                        new
                        {
                            Id = 4,
                            Dimensions = 4
                        },
                        new
                        {
                            Id = 5,
                            Dimensions = 5
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Dimensions")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContainerId = 1,
                            CustomerId = 1,
                            Dimensions = 1,
                            SpecialInstructions = "dangerous",
                            Type = "box"
                        },
                        new
                        {
                            Id = 2,
                            ContainerId = 2,
                            CustomerId = 1,
                            Dimensions = 2,
                            SpecialInstructions = "perishable",
                            Type = "box"
                        },
                        new
                        {
                            Id = 3,
                            ContainerId = 1,
                            CustomerId = 1,
                            Dimensions = 3,
                            SpecialInstructions = "dangerous",
                            Type = "cylinder"
                        },
                        new
                        {
                            Id = 4,
                            ContainerId = 1,
                            CustomerId = 2,
                            Dimensions = 4,
                            SpecialInstructions = "perishable",
                            Type = "cylinder"
                        },
                        new
                        {
                            Id = 5,
                            ContainerId = 2,
                            CustomerId = 2,
                            Dimensions = 1,
                            SpecialInstructions = "dangerous",
                            Type = "cylinder"
                        },
                        new
                        {
                            Id = 6,
                            ContainerId = 3,
                            CustomerId = 2,
                            Dimensions = 5,
                            SpecialInstructions = "perishable",
                            Type = "box"
                        },
                        new
                        {
                            Id = 7,
                            ContainerId = 3,
                            CustomerId = 3,
                            Dimensions = 5,
                            SpecialInstructions = "dangerous",
                            Type = "box"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.SchedulingProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PackageId")
                        .IsUnique();

                    b.ToTable("SchedulingProcess");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualInDate = new DateTime(2023, 8, 28, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9705),
                            ExpectedInDate = new DateTime(2023, 8, 28, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9670),
                            ExpectedOutDate = new DateTime(2023, 8, 31, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9697),
                            LocationId = 1,
                            PackageId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpectedInDate = new DateTime(2023, 8, 31, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9709),
                            ExpectedOutDate = new DateTime(2023, 9, 2, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9710),
                            LocationId = 4,
                            PackageId = 4
                        },
                        new
                        {
                            Id = 3,
                            ActualInDate = new DateTime(2023, 8, 26, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9715),
                            ExpectedInDate = new DateTime(2023, 8, 25, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9712),
                            ExpectedOutDate = new DateTime(2023, 8, 30, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9714),
                            LocationId = 2,
                            PackageId = 2
                        },
                        new
                        {
                            Id = 4,
                            ExpectedInDate = new DateTime(2023, 8, 22, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9717),
                            ExpectedOutDate = new DateTime(2023, 8, 27, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9718),
                            LocationId = 3,
                            PackageId = 3
                        },
                        new
                        {
                            Id = 5,
                            ActualInDate = new DateTime(2023, 8, 24, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9723),
                            ActualOutDate = new DateTime(2023, 8, 27, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9724),
                            ExpectedInDate = new DateTime(2023, 8, 24, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9720),
                            ExpectedOutDate = new DateTime(2023, 8, 27, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9721),
                            LocationId = 1,
                            PackageId = 5
                        },
                        new
                        {
                            Id = 6,
                            ActualInDate = new DateTime(2023, 8, 23, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9729),
                            ActualOutDate = new DateTime(2023, 8, 25, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9730),
                            ExpectedInDate = new DateTime(2023, 8, 22, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9726),
                            ExpectedOutDate = new DateTime(2023, 8, 25, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9727),
                            LocationId = 5,
                            PackageId = 6
                        },
                        new
                        {
                            Id = 7,
                            ActualInDate = new DateTime(2023, 8, 26, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9734),
                            ActualOutDate = new DateTime(2023, 8, 27, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9736),
                            ExpectedInDate = new DateTime(2023, 8, 25, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9732),
                            ExpectedOutDate = new DateTime(2023, 8, 27, 15, 12, 32, 243, DateTimeKind.Local).AddTicks(9733),
                            LocationId = 5,
                            PackageId = 7
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.SupplierContainer", b =>
                {
                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ContainerId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContainer");

                    b.HasData(
                        new
                        {
                            ContainerId = 1,
                            SupplierId = 4
                        },
                        new
                        {
                            ContainerId = 2,
                            SupplierId = 4
                        },
                        new
                        {
                            ContainerId = 1,
                            SupplierId = 5
                        },
                        new
                        {
                            ContainerId = 3,
                            SupplierId = 5
                        },
                        new
                        {
                            ContainerId = 2,
                            SupplierId = 6
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Customer", b =>
                {
                    b.HasBaseType("Warehouse.Domain.Entities.User");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "khadija"
                        },
                        new
                        {
                            Id = 2,
                            Name = "sara"
                        },
                        new
                        {
                            Id = 3,
                            Name = "laith"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Supplier", b =>
                {
                    b.HasBaseType("Warehouse.Domain.Entities.User");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Name = "Yousif Supplier"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Amro Supplier"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ahmad Supplier"
                        });
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Package", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Customer", "Customer")
                        .WithMany("Packages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Location", null)
                        .WithMany("Packages")
                        .HasForeignKey("LocationId");

                    b.Navigation("Container");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.SchedulingProcess", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Location", null)
                        .WithMany("Schedulings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Package", "Package")
                        .WithOne("SchedulingProcess")
                        .HasForeignKey("Warehouse.Domain.Entities.SchedulingProcess", "PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.SupplierContainer", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.Container", null)
                        .WithMany("SupplierContainer")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.Entities.Supplier", null)
                        .WithMany("SupplierContainer")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Warehouse.Domain.Entities.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("Warehouse.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Warehouse.Domain.Entities.Supplier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Container", b =>
                {
                    b.Navigation("SupplierContainer");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Location", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Schedulings");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Package", b =>
                {
                    b.Navigation("SchedulingProcess")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Warehouse.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("SupplierContainer");
                });
#pragma warning restore 612, 618
        }
    }
}
